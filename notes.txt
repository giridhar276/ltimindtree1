


c datatypes
------------------
int a = 10;
float
char
double
long
short

python - objects
------------------------


number
-----------
number can be integer or decimal or octal or hexa.


a = 10
aval = 10
baval = 3.43



string
-------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "java programming"
cname = """unix shell programming"""
dname = '''react programming'''



list ( array in C )
-----------------------
list contains set of elements.
elements can be numbers or strings or any combinatin.
list is defined in []

alist = [10,20,30,40]
blist = ["python","java","oracle"]
clist = [10,4.34,"python",[20,30] ,["java","oracle"] ]



tuple  ( immutable  unchangeable uneditable)
------
tuple contains set of elements.
elements can be numbers or strings or any combination.
tuple is defined in ().
*** elements inside tuple cannot be modified directly ***

atup = (45,43,45)
btup = (56,43,4.55,[10,30] )



empdb = [["ram",'2-2-2',"123444232"],["raj",'3-3-3',"56343434"]] # list of lists
empdb = [("ram",'2-2-2',"123444232"),("raj",'3-3-3',"56343434")] # list of tuples


dictionary  ( json  hashmap  hash  associativearray  pair  item )
-----------
dictionary is all about keys and values.
In dictionary .. keys are unique
                 key can be number or string to identify the value.
                 value can be number or string or list or tuple or dictionary.

syntax :  object = { key:value , key:value , key:value }
example:    book = {"chap1": 10 ,"chap2":20 ,"chap3": 30 }
            data = { 1:2 ,3:4,5:6}
            info = { 1:[10,20] ,3:[30,40]}
            book = {"chap1": {"rita":"US"} ,"chap2":{"gita":"UK"} }


Index
------
chap1   10
chap2   20
chap3   30
chap4   30




set ( venn diagrams )
-----
set is UNORDERED collection of UNIQUE values of SAME type.


aset = {10,10,20,20,30,30}



C
---
int a =10,b = 20;
if ( a < b )  
{
	#
	#
}


python
------
if cond:
    # condition

conditions
-------------
if         ( simple if )
if-else    ( if  else)
if-elif-elif-elif-else  ( if-elif block )


level1
level1
level1
if  cond:
    level2
    level2
    level2
level1
level1
level1

There are two ways of commenting

# this is single line comment


"""
this is
multiline
comment
"""



file handling
--------------------

txt
exe
xlsx
pdf
csv
jpeg
png
docx
pptx
log
conf
repo
env
json
xml
html
ext4
xfs
bat
h
zip
rar
tar
tar.gz
7z
mp3
mp4
dat
mkv
mov
parqueet
gzip





working with flat files  ( log  txt  csv  conf  )
------------------------
- We dont need anything tool to open this.


opening the file
-------------------
read mode
write mode
append mode

syntax:   object = open(filename , mode)
example:    fobj = open("clients.txt","r")
	    case1: file should exist to read the file

	    fobj = open("clients.txt","w") 
	    case1: if file is not found... file gets created first
            case2: if file is already existing.. it overwrites the existing content

	    fobj = open("clients.txt","a") 
	    case1: if file is not found... file gets created first
            case2: if file is already existing.. it appendsthe new data to the file

closing the file
-------------------
fobj.close()


read operation
-----------------
1. reading the file line by line
2. fobj.readlines()    -------> will return list
3. fobj.read()         -------> will return string
4. using csv library
5. using pandas library


write operation
----------------

fobj.write()
fobj.writelines()
















working with third party files  ( pdf  pptx  docx  xlsx mp4  )
---------------------------------
Depending on the type of file , we need to install the library from www.pypi.org


Basically we have 2 types of errors.

1. syntax error
2. semantic error or runtime error or logical error.


Handling errors that occurs during runtime is knonn as 
exception handling.


exception handling
----------------------
try
except 
else
finally
raise








display all the list of exceptions  and builtin functions?
-----------------------------------------------------

print(dir(__builtins__))   #list of exceptions  and builtin functions?


function | definition | block | subroutine | submodule
-------------------------------------------------------
- reusability
- define the block once and call it for multiple times


There are 2 types of functions 

1. builtin functions
2. user defined functions


C style   ( call by value and call by reference)
-------

int add(int a,int b)
{
	int c = a + b;
        return c;
}
total = add(10,20);

python style   ( call by object )
---------------
def add(a,b):
   c = a + b
   return c

total = add(10,20);


different ways of passing arguments
-------------------------------------
fixed arguments
default arguments
keyword arguments
variable length arguments




















    



















